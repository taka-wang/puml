@startuml

set namespaceSeparator /
scale 1920 width

title Proactive service

skinparam classAttributeIconSize 0

' implemented
"psmb/IReaderTaskDataStore" <|. "psmb/mem-reader/dataStore" : implemented
"psmb/IWriterTaskDataStore" <|. "psmb/mem-writer/dataStore" : implemented
"psmb/IWriterTaskDataStore" <|. "psmb/redis-writer/dataStore" : implemented
"psmb/IHistoryDataStore" <|. "psmb/redis-history/dataStore" : implemented
"psmb/IHistoryDataStore" <|. "psmb/mgo-history/dataStore" : implemented
"psmb/IProactiveService" <|. "psmb/tcp/Service" : implemented
"psmb/IFilterDataStore" <|. "psmb/mem-filter/dataStore" : implemented
"psmb/IFilterDataStore" <|. "psmb/redis-filter/dataStore" : implemented
"psmb/IConfig" <|. "psmb/viper-conf/vConf" : implemented
"psmb/IConfig" <|. "psmb/mini-conf/mConf" : implemented

' composition
"psmb/tcp/Service"  *-->  "psmb/IReaderTaskDataStore" : composite
"psmb/tcp/Service"  *-->  "psmb/IWriterTaskDataStore" : composite
"psmb/tcp/Service"  *-->  "psmb/IHistoryDataStore" : composite
"psmb/tcp/Service"  *-->  "psmb/IFilterDataStore" : composite
"psmb/tcp/Service"  *-->  "psmb/IConfig" : composite


class psmb/redis-writer/dataStore {
    +Add(tid string, cmd string)
    +Delete(tid string)
    +Get(tid string) (string, bool)
}

class psmb/mem-writer/dataStore {
    +Add(tid string, cmd string)
    +Delete(tid string)
    +Get(tid string) (string, bool)
}

class psmb/mem-reader/dataStore {
    +Add(name string, tid string, cmd string, req interface{})
    +DeleteAll()
    +DeleteTaskByID(tid string)
    +DeleteTaskByName(name string)
    +GetAll() interface{}
    +GetTaskByID(tid string) (interface{}, bool)
    +GetTaskByName(name string) (interface{}, bool)
    +UpdateAllToggles(toggle bool)
    +UpdateIntervalByName(name string, interval uint64) error
    +UpdateToggleByName(name string, toggle bool) error
}

class psmb/redis-history/dataStore {
    +Add(name string, data interface{}) error
    +Get(name string, limit int) (map[string]string, error)
    +GetAll(name string) (map[string]string, error)
    +GetLatest(name string) (string, error)
}

class psmb/mgo-history/dataStore {
    +Add(name string, data interface{}) error
    +Get(name string, limit int) (map[string]string, error)
    +GetAll(name string) (map[string]string, error)
    +GetLatest(name string) (string, error)
    ~openSession() (*mgo.Session, error)
    ~closeSession(session *mgo.Session)
    ~marshal(r interface{}) (string, error)
}

class psmb/tcp/Service {
    +HandleRequest(cmd string, r interface{}) error
    +HandleResponse(cmd string, r interface{}) error
    +ParseRequest(msg []string) (interface{}, error)
    +ParseResponse(msg []string) (interface{}, error)
    +Start()
    +Stop()
    +Task(socket *zmq.Socket, req interface{})
    ~addToHistory(name string, data interface{})
    ~applyFilter(name string, data interface{}) bool
    ~startZMQ()
    ~stopZMQ()
    ~naiveResponder(cmd string, resp interface{}) error
}

class psmb/mem-filter/dataStore {
	+Add(name string, req interface{})
	+Get(name string) (interface{}, bool)
	+GetAll() interface{}
	+Delete(name string)
	+DeleteAll()
	+UpdateToggle(name string, toggle bool) error
	+UpdateAllToggles(toggle bool)
}

class psmb/redis-filter/dataStore {
	+Add(name string, req interface{})
	+Get(name string) (interface{}, bool)
	+GetAll() interface{}
	+Delete(name string)
	+DeleteAll()
	+UpdateToggle(name string, toggle bool) error
	+UpdateAllToggles(toggle bool)
}

interface psmb/IHistoryDataStore {
    +Add(name string, data interface{}) error
    +Get(name string, limit int) (map[string]string, error)
    +GetAll(name string) (map[string]string, error)
    +GetLatest(name string) (string, error)
}

interface psmb/IReaderTaskDataStore {
    +Add(name string, tid string, cmd string, req interface{}) error
    +DeleteAll()
    +DeleteTaskByID(tid string)
    +DeleteTaskByName(name string)
    +GetAll() interface{}
    +GetTaskByID(tid string) (interface{}, bool)
    +GetTaskByName(name string) (interface{}, bool)
    +UpdateAllToggles(toggle bool)
    +UpdateIntervalByName(name string, interval uint64) error
    +UpdateToggleByName(name string, toggle bool) error
}

interface psmb/IFilterDataStore {
	+Add(name string, req interface{}) error
	+Get(name string) (interface{}, bool)
	+GetAll() interface{}
	+Delete(name string)
	+DeleteAll()
	+UpdateToggle(name string, toggle bool) error
	+UpdateAllToggles(toggle bool)
}

interface psmb/IWriterTaskDataStore {
    +Add(tid string, cmd string)
    +Delete(tid string)
    +Get(tid string) (string, bool)
}

interface psmb/IProactiveService {
    +HandleRequest(cmd string, r interface{}) error
    +HandleResponse(cmd string, r interface{}) error
    +ParseRequest(msg []string) (interface{}, error)
    +ParseResponse(msg []string) (interface{}, error)
    +Start()
    +Stop()
}

interface psmb/IConfig {
    ~setLogger()
	~initConfig()
}

class psmb/viper-conf/vConf {
    ~setLogger()
	~initConfig()
}

class psmb/mini-conf/mConf {
    ~setLogger()
	~initConfig()
}

/'
note top of psmb/IProactiveService : Proactive service contracts
note top of psmb/IWriterTaskDataStore : Writer datastore contracts
note top of psmb/IReaderTaskDataStore : Reader datastore contracts
note top of psmb/IHistoryDataStore : Historian datastore contracts
'/

left to right direction

caption @taka-wang

hide interface fields

@enduml