@startuml

set namespaceSeparator /
scale 1920 width

title Proactive service

skinparam classAttributeIconSize 0

' implemented
"psmb/IReaderTaskDataStore" <|. "psmb/mem-reader/readerTaskDataStore"
"psmb/IWriterTaskDataStore" <|. "psmb/mem-writer/writerTaskDataStore"
"psmb/IWriterTaskDataStore" <|. "psmb/redis-writer/writerTaskDataStore"
"psmb/IHistoryDataStore" <|. "psmb/redis-history/dataStore"
"psmb/IHistoryDataStore" <|. "psmb/mgo-history/dataStore"
"psmb/IProactiveService" <|. "psmb/tcp/Service"

' composition
"psmb/tcp/Service"  *-->  "psmb/mem-writer/writerTaskDataStore"
"psmb/tcp/Service"  *-->  "psmb/redis-writer/writerTaskDataStore"
"psmb/tcp/Service"  *-->  "psmb/redis-history/dataStore"
"psmb/tcp/Service"  *-->  "psmb/mgo-history/dataStore"
"psmb/tcp/Service"  *-->  "psmb/mem-reader/readerTaskDataStore"

class psmb/redis-writer/writerTaskDataStore {
    +Add(tid string, cmd string)
    +Delete(tid string)
    +Get(tid string) (string, bool)
    ~closeRedis()
    ~connectRedis() error
}

class psmb/mem-writer/writerTaskDataStore {
    +Add(tid string, cmd string)
    +Delete(tid string)
    +Get(tid string) (string, bool)
}

class psmb/mem-reader/readerTaskDataStore {
    +Add(name string, tid string, cmd string, req interface{})
    +DeleteAll()
    +DeleteTaskByID(tid string)
    +DeleteTaskByName(name string)
    +GetAll() interface{}
    +GetTaskByID(tid string) (interface{}, bool)
    +GetTaskByName(name string) (interface{}, bool)
    +UpdateAllTogglesByName(toggle bool)
    +UpdateIntervalByName(name string, interval uint64) error
    +UpdateToggleByName(name string, toggle bool) error
}

class psmb/redis-history/dataStore {
    +Add(name string, data interface{}) error
    +Get(name string, limit int) (map[string]string, error)
    +GetAll(name string) (map[string]string, error)
    +GetLatest(name string) (string, error)
    ~closeRedis()
    ~connectRedis() error
}

class psmb/mgo-history/dataStore {
    +Add(name string, data interface{}) error
    +Get(name string, limit int) (map[string]string, error)
    +GetAll(name string) (map[string]string, error)
    +GetLatest(name string) (string, error)
    ~openSession() (*mgo.Session, error)
    ~closeSession(session *mgo.Session)
    ~marshal(r interface{}) (string, error)
}

class psmb/tcp/Service {
    +HandleRequest(cmd string, r interface{}) error
    +HandleResponse(cmd string, r interface{}) error
    +ParseRequest(msg []string) (interface{}, error)
    +ParseResponse(msg []string) (interface{}, error)
    +Start()
    +Stop()
    +Task(socket *zmq.Socket, req interface{})
    ~addToHistory(taskName string, data interface{})
    ~initZMQPub()
    ~initZMQSub()
    ~initZMQPoller()
    ~naiveResponder(cmd string, resp interface{}) error
}

interface psmb/IHistoryDataStore {
    +Add(name string, data interface{}) error
    +Get(name string, limit int) (map[string]string, error)
    +GetAll(name string) (map[string]string, error)
    +GetLatest(name string) (string, error)
}

interface psmb/IReaderTaskDataStore {
    +Add(name string, tid string, cmd string, req interface{})
    +DeleteAll()
    +DeleteTaskByID(tid string)
    +DeleteTaskByName(name string)
    +GetAll() interface{}
    +GetTaskByID(tid string) (interface{}, bool)
    +GetTaskByName(name string) (interface{}, bool)
    +UpdateAllTogglesByName(toggle bool)
    +UpdateIntervalByName(name string, interval uint64) error
    +UpdateToggleByName(name string, toggle bool) error
}

interface psmb/IWriterTaskDataStore {
    +Add(tid string, cmd string)
    +Delete(tid string)
    +Get(tid string) (string, bool)
}

interface psmb/IProactiveService {
    +HandleRequest(cmd string, r interface{}) error
    +HandleResponse(cmd string, r interface{}) error
    +ParseRequest(msg []string) (interface{}, error)
    +ParseResponse(msg []string) (interface{}, error)
    +Start()
    +Stop()
}

/'
note top of psmb/IProactiveService : Proactive service contracts
note top of psmb/IWriterTaskDataStore : Writer datastore contracts
note top of psmb/IReaderTaskDataStore : Reader datastore contracts
note top of psmb/IHistoryDataStore : Historian datastore contracts
'/

left to right direction

caption @taka-wang

hide interface fields

@enduml